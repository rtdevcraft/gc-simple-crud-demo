name: Build and Deploy to Cloud Run

on:
  push:
    branches: ['master']

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: gc-simple-crud-demo
  REGION: us-central1
  AR_REPOSITORY: simple-crud-demo
  AR_LOCATION: us-west4

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Debug DATABASE_URL Format
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Analyzing DATABASE_URL format..."

          # Check if DATABASE_URL is set
          if [[ -z "$DATABASE_URL" ]]; then
            echo "❌ ERROR: DATABASE_URL is not set"
            exit 1
          fi

          # Show the structure (hiding sensitive parts)
          echo "URL structure analysis:"
          echo "Length: ${#DATABASE_URL} characters"
          echo "Starts with: ${DATABASE_URL:0:15}..."

          # Check protocol
          if [[ "$DATABASE_URL" =~ ^postgresql:// ]]; then
            echo "✅ Protocol: postgresql://"
          elif [[ "$DATABASE_URL" =~ ^postgres:// ]]; then
            echo "✅ Protocol: postgres:// (alternative format)"
          else
            echo "❌ Invalid protocol. Must start with 'postgresql://' or 'postgres://'"
            echo "Current start: ${DATABASE_URL:0:20}"
            exit 1
          fi

          # Remove protocol for further analysis
          url_without_protocol="${DATABASE_URL#*://}"
          echo "Without protocol: ${url_without_protocol:0:10}...${url_without_protocol: -10}"

          # Check for @ symbol (separates auth from host)
          if [[ "$url_without_protocol" == *"@"* ]]; then
            echo "✅ Contains @ symbol (auth separator found)"
            
            # Split on @ to get auth and host parts
            auth_part="${url_without_protocol%%@*}"
            host_part="${url_without_protocol#*@}"
            
            echo "Auth part length: ${#auth_part}"
            echo "Host part: ${host_part:0:20}..."
            
            # Check auth part for username:password format
            if [[ "$auth_part" == *":"* ]]; then
              username="${auth_part%%:*}"
              password="${auth_part#*:}"
              echo "✅ Username found: $username"
              echo "✅ Password length: ${#password} characters"
              
              # Check for unencoded special characters in password
              if [[ "$password" == *"@"* ]]; then
                echo "⚠️  WARNING: @ found in password - should be %40"
              fi
              if [[ "$password" == *"$"* ]]; then
                echo "⚠️  WARNING: $ found in password - should be %24"
              fi
              if [[ "$password" == *"#"* ]]; then
                echo "⚠️  WARNING: # found in password - should be %23"
              fi
              if [[ "$password" == *"?"* ]]; then
                echo "⚠️  WARNING: ? found in password - should be %3F"
              fi
              if [[ "$password" == *"/"* ]]; then
                echo "⚠️  WARNING: / found in password - should be %2F"
              fi
            else
              echo "❌ Auth part missing colon separator for username:password"
              exit 1
            fi
            
            # Analyze host part (should be host:port/database)
            if [[ "$host_part" == *":"* ]]; then
              host="${host_part%%:*}"
              port_and_db="${host_part#*:}"
              echo "✅ Host: $host"
              
              if [[ "$port_and_db" == *"/"* ]]; then
                port="${port_and_db%%/*}"
                database_part="${port_and_db#*/}"
                echo "✅ Port: $port"
                echo "✅ Database part: ${database_part:0:20}..."
                
                # Validate port
                if [[ ! "$port" =~ ^[0-9]+$ ]]; then
                  echo "❌ ERROR: Port '$port' is not a valid number"
                  exit 1
                elif [[ "$port" -lt 1 ]] || [[ "$port" -gt 65535 ]]; then
                  echo "❌ ERROR: Port '$port' is out of valid range (1-65535)"
                  exit 1
                fi
                
                echo "✅ DATABASE_URL appears to have correct structure"
              else
                echo "❌ ERROR: Missing database part (no / found after port)"
                exit 1
              fi
            else
              echo "❌ ERROR: Missing port (no : found in host part)"
              exit 1
            fi
          else
            echo "❌ ERROR: Missing @ symbol (no authentication part found)"
            echo "Expected format: postgresql://username:password@host:port/database"
            exit 1
          fi

      - name: Setup Cloud SQL Proxy
        run: |
          echo "Setting up Cloud SQL Proxy..."

          # Download and setup Cloud SQL Proxy
          curl -o cloud_sql_proxy https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64
          chmod +x cloud_sql_proxy

          # Get the connection name - you need to replace this with your actual values
          CONNECTION_NAME="${{ secrets.GCP_PROJECT_ID }}:$REGION:${{ secrets.CLOUD_SQL_INSTANCE_NAME }}"
          echo "Connection name: $CONNECTION_NAME"

          # Start proxy in background
          echo "Starting Cloud SQL Proxy..."
          ./cloud_sql_proxy -instances=$CONNECTION_NAME=tcp:5432 &
          PROXY_PID=$!
          echo "Cloud SQL Proxy started with PID: $PROXY_PID"

          # Wait longer and check more thoroughly
          echo "Waiting for Cloud SQL Proxy to be ready on port 5432..."
          for i in {1..60}; do
            if nc -z 127.0.0.1 5432; then
              echo "✅ Cloud SQL Proxy is ready on port 5432 (attempt $i)"
              break
            fi
            
            # Check if proxy process is still running
            if ! kill -0 $PROXY_PID 2>/dev/null; then
              echo "❌ Cloud SQL Proxy process died"
              echo "Checking for error logs..."
              sleep 1
              exit 1
            fi
            
            echo "Attempt $i/60: Waiting for proxy... (PID $PROXY_PID still running)"
            sleep 3
          done

          # Final comprehensive check
          if nc -z 127.0.0.1 5432; then
            echo "✅ Cloud SQL Proxy is successfully running on port 5432"
            echo "Testing connection with timeout..."
            timeout 5s bash -c 'cat < /dev/null > /dev/tcp/127.0.0.1/5432' && echo "✅ Port 5432 is accepting connections"
          else
            echo "❌ Cloud SQL Proxy failed to start on port 5432"
            echo "Process status:"
            ps aux | grep cloud_sql_proxy | grep -v grep || echo "No cloud_sql_proxy process found"
            echo "Network status:"
            netstat -tlnp | grep 5432 || echo "Nothing listening on port 5432"
            echo "Checking for any error output..."
            sleep 2
            exit 1
          fi

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Prisma Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Running Prisma migrations..."
          npx prisma migrate deploy
          echo "✅ Migrations completed successfully"

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker $AR_LOCATION-docker.pkg.dev

      - name: Build and Push to Artifact Registry
        env:
          IMAGE_TAG: ${{ github.sha }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}
        run: |
          IMAGE_URI=$AR_LOCATION-docker.pkg.dev/$PROJECT_ID/$AR_REPOSITORY/$SERVICE_NAME:$IMAGE_TAG

          echo "Building Docker image: $IMAGE_URI"
          docker build \
            --build-arg NEXT_PUBLIC_FIREBASE_API_KEY="$NEXT_PUBLIC_FIREBASE_API_KEY" \
            --build-arg NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN="$NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN" \
            --build-arg NEXT_PUBLIC_FIREBASE_PROJECT_ID="$NEXT_PUBLIC_FIREBASE_PROJECT_ID" \
            --build-arg NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET="$NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET" \
            --build-arg NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID="$NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID" \
            --build-arg NEXT_PUBLIC_FIREBASE_APP_ID="$NEXT_PUBLIC_FIREBASE_APP_ID" \
            -t $IMAGE_URI .

          echo "Pushing image to Artifact Registry..."
          docker push $IMAGE_URI
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          echo "✅ Image built and pushed successfully"

      - name: Deploy to Cloud Run
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Deploying to Cloud Run..."
          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE_URI \
            --region $REGION \
            --platform managed \
            --allow-unauthenticated \
            --set-env-vars="DATABASE_URL=$DATABASE_URL" \
            --memory=1Gi \
            --cpu=1 \
            --max-instances=10 \
            --port=3000 \
            --quiet

          echo "✅ Deployment completed successfully"

          # Get the service URL
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format="value(status.url)")
          echo "🚀 Service deployed at: $SERVICE_URL"
