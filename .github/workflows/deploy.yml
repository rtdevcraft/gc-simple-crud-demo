name: Build and Deploy to Cloud Run

on:
  push:
    branches: ['master']

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: gc-simple-crud-demo
  REGION: us-central1
  GCS_BUCKET: my-project-1502729769937-cloudbuild-src

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    # These permissions are required for the OIDC token exchange
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      # This step configures gcloud to use the credentials from the auth step
      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: Submit Build Asynchronously
        id: build
        run: |-
          BUILD_ID=$(gcloud builds submit \
            --tag "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" \
            --gcs-source-staging-dir "gs://$GCS_BUCKET/source" \
            --async \
            --format='value(id)')
          echo "build_id=$BUILD_ID" >> $GITHUB_OUTPUT

      - name: Wait for Build to Complete by Polling
        run: |-
          BUILD_ID="${{ steps.build.outputs.build_id }}"
          echo "Waiting for build: $BUILD_ID"

          while true; do
            STATUS=$(gcloud builds describe "$BUILD_ID" --format='value(status)')
            echo "Current build status: $STATUS"
            if [[ "$STATUS" == "SUCCESS" ]]; then
              break
            elif [[ "$STATUS" == "FAILURE" || "$STATUS" == "CANCELLED" || "$STATUS" == "TIMEOUT" ]]; then
              echo "Build failed with status: $STATUS"
              exit 1
            fi
            sleep 10
          done

      - name: Deploy to Cloud Run
        run: |-
          gcloud run deploy $SERVICE_NAME \
            --image "gcr.io/$PROJECT_ID/$SERVICE_NAME:$GITHUB_SHA" \
            --region $REGION \
            --platform managed \
            --quiet
